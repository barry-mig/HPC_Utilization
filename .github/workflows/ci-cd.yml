# name: HPC Utilization CI/CD Pipeline

# on:
#   push:
#     branches: [ main, develop ]
#     paths:
#       - 'services/**'
#       - 'kubernetes/**'
#       - '.github/workflows/**'
#   pull_request:
#     branches: [ main ]
#     paths:
#       - 'services/**'
#       - 'kubernetes/**'

# env:
#   REGISTRY: ghcr.io
#   NAMESPACE: hpc-system

# DEMO PROJECT: Comprehensive CI/CD Pipeline for HPC System
# Full pipeline with testing, security scanning, and deployment
# Most jobs commented out for presentation

name: HPC Utilization CI/CD Pipeline (DEMO)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'kubernetes/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - 'kubernetes/**'

env:
  REGISTRY: ghcr.io
  NAMESPACE: hpc-system

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [workload-predictor, resource-optimizer]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      if: matrix.service != 'api-gateway'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Go
      if: matrix.service == 'api-gateway'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Python dependencies
      if: matrix.service != 'api-gateway'
      run: |
        cd services/${{ matrix.service }}
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Install Go dependencies
      if: matrix.service == 'api-gateway'
      run: |
        cd services/${{ matrix.service }}
        go mod download
        go mod verify

    - name: Run Python tests
      if: matrix.service != 'api-gateway'
      run: |
        cd services/${{ matrix.service }}
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

    - name: Run Go tests
      if: matrix.service == 'api-gateway'
      run: |
        cd services/${{ matrix.service }}
        go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage.*
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter (Python)
      run: |
        pip install bandit
        find services -name "*.py" -exec bandit -r {} + || true

    - name: Run gosec security scanner (Go)
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: 'services/api-gateway/...'

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [workload-predictor, resource-optimizer, api-gateway]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/hpc-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in deployment files
        find kubernetes/deployments -name "*.yaml" -exec sed -i 's|latest|${{ github.sha }}|g' {} +
        
        # Apply namespace and configurations
        kubectl apply -f kubernetes/namespace-and-config.yaml
        
        # Apply deployments
        kubectl apply -f kubernetes/deployments/
        
        # Apply monitoring
        kubectl apply -f kubernetes/monitoring/
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment --all -n ${{ env.NAMESPACE }}

    - name: Run integration tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get the external IP of the API gateway
        API_GATEWAY_IP=$(kubectl get service api-gateway-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run basic health checks
        curl -f http://$API_GATEWAY_IP/health || exit 1
        curl -f http://$API_GATEWAY_IP/api/v1/predict/model/info || exit 1
        curl -f http://$API_GATEWAY_IP/api/v1/optimize/algorithms || exit 1

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Blue-Green deployment strategy
        
        # Update image tags
        find kubernetes/deployments -name "*.yaml" -exec sed -i 's|latest|${{ github.sha }}|g' {} +
        
        # Apply configurations
        kubectl apply -f kubernetes/namespace-and-config.yaml
        
        # Rolling update deployments
        kubectl apply -f kubernetes/deployments/
        
        # Apply monitoring
        kubectl apply -f kubernetes/monitoring/
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=600s deployment --all -n ${{ env.NAMESPACE }}

    - name: Production health check
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get the external IP
        API_GATEWAY_IP=$(kubectl get service api-gateway-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Comprehensive health checks
        curl -f http://$API_GATEWAY_IP/health || exit 1
        curl -f http://$API_GATEWAY_IP/api/v1/predict/model/info || exit 1
        curl -f http://$API_GATEWAY_IP/api/v1/optimize/algorithms || exit 1
        curl -f http://$API_GATEWAY_IP/services || exit 1

    - name: Rollback on failure
      if: failure()
      run: |
        export KUBECONFIG=kubeconfig
        echo "Deployment failed, rolling back..."
        kubectl rollout undo deployment --all -n ${{ env.NAMESPACE }}

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Get API Gateway endpoint
        API_GATEWAY_IP=$(kubectl get service api-gateway-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Create k6 test script
        cat > load-test.js << EOF
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export let options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 50 },
            { duration: '2m', target: 0 },
          ],
        };
        
        export default function() {
          let response = http.get('http://$API_GATEWAY_IP/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF
        
        # Run the load test
        k6 run load-test.js

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-to-production, deploy-to-staging]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: needs.deploy-to-production.result == 'success' || needs.deploy-to-staging.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#hpc-deployments'
        text: '✅ HPC Utilization System deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on Failure
      if: needs.deploy-to-production.result == 'failure' || needs.deploy-to-staging.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#hpc-deployments'
        text: '❌ HPC Utilization System deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && needs.deploy-to-production.result == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Automated deployment of HPC Utilization System
          - Commit: ${{ github.sha }}
          - Deployed services:
            - Workload Predictor
            - Resource Optimizer  
            - API Gateway
            - Monitoring Stack
        draft: false
        prerelease: false
